WMS.module('Clients.Estimates', function(Estimates, WMS, Backbone, Marionette, $, _) {  var Views = Estimates.Views = _.extend({}, WMS.Common.Views)    , Behaviors = WMS.Common.Behaviors;    Views.Layout = Views.MasterDetailsLayout.extend({    title     : 'Preventivi Cliente',    showFilter: true  });    var FilterModel = Backbone.Model.extend({    defaults: {      code    : ''    , clientId: undefined    , from    : Date.today().addMonths(-1)    , to      : Date.today()    }  , getClients: WMS.getClients  });  Views.FilterView = Views.FilterView.extend({    initialize: function(options) {      this.model = new FilterModel(_.pick(options, _.keys(FilterModel.prototype.defaults)));    }  });    var EstimateForm = Views.ModalFormView.extend({    behaviors: [{      behaviorClass : Behaviors.FormBehavior    , fieldSelector : 'app-field'    , insertPoint   : 'div.modal-body'    , skipFields    : ['total', 'clientCode', "accepted"]    , readonly      : ['code', 'date', "commissionId"]    , modelClass    : WMS.Models.Estimate    }, {      behaviorClass : Behaviors.CascadingDefaultBehavior    , bindings      : {clientId:["paymentTypeId", "applyTo"]}    }, {      behaviorClass : Behaviors.CascadingDropdownBehavior    , bindings      : {clientId:["commissionId","destinationId"]}    }, {      behaviorClass : Behaviors.ModalBehavior    }]  });    Views.NewEstimate = EstimateForm.extend({    title         : 'Nuovo Preventivo'  , saveButtonText: 'Crea Preventivo'  });    Views.EditEstimate = EstimateForm.extend({    title         : 'Modifica Preventivo'  , saveButtonText: 'Aggiorna'  });  Views.Panel = Marionette.ItemView.extend({    template: _.template("")  , behaviors: [{      behaviorClass: Behaviors.TabPanelBehavior    }, {      behaviorClass: Behaviors.AddModelBehavior    , insertPoint: ".pre.actions-bar"    , FormView: Views.NewEstimate    , modelClass: WMS.Models.ClientEstimate    }]  });  var Estimate = Views.TableRowView.extend({    behaviors: [{      behaviorClass: Behaviors.SelectableBehavior    }, {      behaviorClass: Behaviors.TableRowBehavior,      fields: [        'code',         {attr:'date', format:'date'},         'clientCode',         'clientId',        'subject'      ]    }, {      behaviorClass : Behaviors.EditableBehavior    , insertPoint   : ".actions"    , button        : false    , FormView      : Views.EditEstimate    }, {      behaviorClass : Behaviors.DestroyableBehavior    , insertPoint   : ".actions"    , button        : false    }, {      behaviorClass: Behaviors.UpdateBehavior    }],    onRender: function() {      if (this.model.isAccepted()) {        this.$el.addClass("success");      }    }  });  Estimates.Views.Estimates = Views.TableView.extend({    childView: Estimate,    childViewEventPrefix: 'client:estimate',    modelClass    : WMS.Models.Estimate,    headers       : [      { width: '10%', name:'code' },      { width: '10%', name:'date' },      { width: '10%', name:'clientCode'},      { width: '25%', name:'clientId' },      { width: '25%', name:'subject' },      { width: '10%' }    ]  });    var EstimateRowForm = Views.ModalFormView.extend({    behaviors: [{      behaviorClass : Behaviors.FormBehavior    , fieldSelector : 'app-field'    , insertPoint   : 'div.modal-body'    , skipFields    : ['total', "accepted"]    , modelClass    : WMS.Models.EstimateRow    }, {      behaviorClass : Behaviors.CascadingDefaultBehavior    , bindings      : {articleId:["description", "unitTypeId", "price"]}    }, {      behaviorClass : Behaviors.ModalBehavior    }]  });  Estimates.Views.NewRow = EstimateRowForm.extend({    title         : 'Nuova riga'  , saveButtonText: 'Aggiungi'  });  Estimates.Views.EditRow = EstimateRowForm.extend({    title         : 'Aggiorna riga'  , saveButtonText: 'Aggiorna'  });    var Row = Views.TableRowView.extend({    behaviors: [{      behaviorClass : Behaviors.TableRowBehavior    , fields        : [        'articleCode'      , 'description'      , 'unitType'      , { attr:'price',     className:'text-right', format:"price" }      , { attr:'quantity',  className:'text-right', format:"money" }      , { attr:'discountPercent', className:"text-right", format:"money"}      , { attr:'total',     className:'text-right', format:"money" }      ]    }, {      behaviorClass : Behaviors.EditableBehavior    , insertPoint   : ".actions"    , button        : false    , FormView      : Views.EditRow    }, {      behaviorClass : Behaviors.DestroyableBehavior    , insertPoint   : ".actions"    , button        : false    }, {      behaviorClass : Behaviors.UpdateBehavior    }]  , onRender:function() {      if (this.model.isAccepted()) {        this.$el.addClass('success');      }    }  });  Estimates.Views.Rows = Views.PanelTableView.extend({    title: "Righe Preventivo",    childView: Row,    childViewEventPrefix: 'client:estimate:row',    modelClass    : WMS.Models.EstimateRow,    headers       : [      { width: '10%', name: 'articleCode' },      { width: '35%', name: 'description' },      { width: '10%', name: 'unitTypeId'},      { width: '10%', name: 'price', className:'text-right' },      { width: '10%', name: 'quantity', className:'text-right' },      { width: '10%', name: 'discountPercent', className:'text-right' },      { width: '10%', name: 'total', className:'text-right' },      { width: '5%' }    ],    behaviors: [{      behaviorClass : Behaviors.CollapsableBehavior    }, {      behaviorClass : Behaviors.ColumnTotalBehavior,      totals        : [,,,,,,{attr:"total", format:"money", className:"text-right"},,]    }, {      behaviorClass : Behaviors.AddBehavior    }]  });  Estimates.Views.Details = Views.DetailsView.extend({    behaviors : [{      behaviorClass : Behaviors.CollapsableBehavior    }, {      behaviorClass : Behaviors.DetailsBehavior,      modelClass    : WMS.Models.ClientEstimate,      fields        : [        { name: "code" },        { name: "date", type: 'date', cols:4 },        { type:'actions', cols:2, className:'actions text-right' },        { name: "subject", cols: 12, labelCols:2, fieldCols: 10 },        { name: "applyTo", cols: 12, labelCols:2, fieldCols: 10 },        { name: "clientCode" },        { name: "clientId", label: false, fieldCols: 12},        { name: "destinationId", cols: 12, labelCols: 2, fieldCols: 10},        { name: "vatRateId", cols:6},        { name: "paymentTypeId", cols:6},        { name:'gradeOfSteel' },        { name:'thickness' },        { name:'galvanization' },        { name:'executionClass' },        { name:'wps' },        { name:'painting' },        { name:'note', type: 'textarea', cols:12, labelCols:2, fieldCols:10 },        { name:'constructionDrawings', cols:6, type:'checkbox' },        { name:'calculationNote', cols:6, type:'checkbox'},        { name:"printTotal", cols:6, type:"checkbox"}      ],    }, {      behaviorClass : Behaviors.UpdateBehavior    }, {      behaviorClass : Behaviors.AddRowBehavior,      insertPoint   : ".actions"    }, {      behaviorClass : Behaviors.ClonableBehavior,      insertPoint   : ".actions"    }, {      behaviorClass : Behaviors.PrintableBehavior,      insertPoint   : ".actions"    }]  });});